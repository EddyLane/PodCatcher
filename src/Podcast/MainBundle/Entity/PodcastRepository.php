<?php

namespace Podcast\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Podcast\MainBundle\Entity\Category;
/**
 * PodcastRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PodcastRepository extends EntityRepository
{

    /**
     * @param  string $sortField
     * @param  string $sortDirection
     * @return type
     */
    public function findAllWithDefaultSort($sortField, $sortDirection)
    {
        return $this->findBy(array(), array($sortField => $sortDirection));
    }
    
    
    /**
     * @param string $category
     * @param string $category
     */
    public function findAllByCategoryAndOrganization(array $categories = [], array $organizations = [], $sort = 'name', $order = 'asc', $amount = 8, $page = 1)
    {
        $qb = $this->createQueryBuilder('podcast');
        $qb
           ->addSelect(sprintf('%s as updated, %s as name',$qb->expr()->max('episode.pub_date'), 'podcast.name'))
           ->distinct()
           ->leftJoin('podcast.episodes','episode')
           ->groupBy('podcast.id')
           ->orderBy($sort, $order);
        ;

        if(count($categories) > 0) {
            $qb
               ->innerJoin('podcast.categories', 'category')
               ->add('where', $qb->expr()->in('category.slug', $categories))
            ;
        }
        if(count($organizations) > 0) {
            $qb
               ->innerJoin('podcast.organizations', 'organization')
               ->add('where', $qb->expr()->in('organization.slug', $organizations))
            ;
        }

        return $qb->getQuery();
    }
    
    /**
     * 
     * @param \Podcast\MainBundle\Entity\Category $category
     * @return type
     */
    public function findByCategory(Category $category)
    {
        return $this->createQueryBuilder('p')
                    ->innerJoin('p.categories','c','WITH','c.id = :category_id')
                    ->setParameter('category_id', $category->getId());
    }

}
