<?php

namespace Podcast\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Podcast\MainBundle\Entity\Category;
/**
 * PodcastRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PodcastRepository extends EntityRepository
{

    /**
     *
     * @param  string $sortField
     * @param  string $sortDirection
     * @return type
     */
    public function findAllWithDefaultSort($sortField, $sortDirection)
    {
        return $this->findBy(array(), array($sortField => $sortDirection));
    }
    /**
     *
     * @param  type $maxResults
     * @return type
     */
    private function getLatestPodcastsQuery($maxResults,$user)
    {

        $query = $this->createQueryBuilder('p')
                ->add('orderBy','p.id DESC')
                ->setMaxResults($maxResults);

        if (false !== $user) {
            $query->leftJoin('p.subscribed','u','WITH','u.id = :user_id')
                    ->addSelect('u.id as subscribed')
                    ->setParameter('user_id', $user->getId());
        }

        return $query;
    }

    public function getMostSubscribedQuery($maxResults = 10,$user)
    {
        $query = $this->createQueryBuilder('p')
                ->addSelect('COUNT(p.id) as subscribed')
                ->addSelect('SELECT(COUNT(u.id) WHERE u.id = :user_id) as subs')
                ->leftJoin('p.subscribed','u')
                ->groupBy('p.id')
                ->orderBy('subscribed','desc')
                ->setMaxResults($maxResults)
                ->setParameter('user_id', $user->getId());

        return $query->getQuery();
    }

    /**
     *
     * @param  type $maxResults
     * @return type
     */
    public function getLatestPodcasts($maxResults = 10,$user = null)
    {
        $podcasts = $this->getLatestPodcastsQuery($maxResults,$user);

        return $podcasts->getQuery()->getResult();
    }

    public function getSubscribedPodcasts($user)
    {
        $podcasts = $this->getLatestPodcastsQuery(100, false);
        $podcasts->innerJoin('p.subscribed','u','WITH','u.id = :user_id')
                ->addSelect('u.id as subscribed')
                ->setParameter('user_id',$user->getId());

        return $podcasts->getQuery();
    }
    
    
    public function findByCategory(Category $category)
    {
        
        $query = $this->createQueryBuilder('p')
                      ->innerJoin('p.categories','c','WITH','c.id = :category_id')
                      ->setParameter('category_id', $category->getId());
        
        return $query;
    }

}
