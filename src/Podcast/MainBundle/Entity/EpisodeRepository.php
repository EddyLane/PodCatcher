<?php

namespace Podcast\MainBundle\Entity;

use Podcast\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Podcast\MainBundle\Entity\Category;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query;

/**
 * EpisodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EpisodeRepository extends EntityRepository
{
    public function getListenedToIds(User $user)
    {
        $qb = $this->createQueryBuilder('episode');

        $episodeIds = $qb->select('episode.id')
            ->innerJoin('episode.listenedBy', 'user')
            ->where('user.id = :userId')
            ->setParameter('userId', $user->getId())
            ->getQuery()
            ->getResult('numeric_array');

        return $episodeIds;
    }



    public function getEpisodes($pubDate = false, array $podcasts = [], $sort = 'episode.pub_date', $order = 'desc', $amount = 10, $page = 1, $hydration = Query::HYDRATE_ARRAY )
    {
        $qb = $this->createQueryBuilder('episode');

        $qb
            ->distinct()
        ;

        if(count($podcasts) > 0) {
            $qb
                ->innerJoin('episode.podcast', 'podcast', 'with',  $qb->expr()->in('podcast.id', $podcasts))
            ;
        }

        if($pubDate) {
            $qb->add('where',$qb->expr()->eq('DATE(episode.pub_date)', ':pub_date'))
               ->setParameter('pub_date', new \DateTime($pubDate), \Doctrine\DBAL\Types\Type::DATETIME);
        }

        $metadata = array(
            'X-Pagination-Total' => count(new Paginator($qb->getQuery(), false)),
            'X-Pagination-Amount'=> $amount,
            'X-Pagination-Page' => $page
        );

        $qb
            ->setMaxResults($amount)
            ->setFirstResult(($page-1) * $amount)
        ;

//        $qb->orderBy($sort, $order);

        $entities = $qb
            ->getQuery()
            ->getResult($hydration);

        return array(
            'metadata' => $metadata,
            'entities' => $entities
        );
    }

}
